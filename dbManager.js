import mysql from 'mysql2/promise';
import dotenv from 'dotenv';
import fs from 'fs/promises';


dotenv.config();


const dbConfig = {
    host: process.env.dbhost,
    port: process.env.dbport,
    user: process.env.dbuser,
    password: process.env.dbpass,
    database: process.env.dbname,
    timezone: "+07:00", // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Bangkok
    dateStrings: true,  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô MySQL ‡πÅ‡∏õ‡∏•‡∏á DATE/TIMESTAMP ‡πÄ‡∏õ‡πá‡∏ô Object
};


async function fetchAllStoredProcedures() {
    let connection;
    try {
        connection = await mysql.createConnection(dbConfig);
        await connection.query("SET NAMES utf8");

        const query = "SELECT ROUTINE_NAME FROM information_schema.ROUTINES WHERE ROUTINE_TYPE = 'PROCEDURE' AND ROUTINE_NAME LIKE 'onep_%'";
        //const query = "SELECT * from ovst limit 1";
        const [rows] = await connection.execute(query);
        console.log(JSON.stringify(rows));
        return rows.map(row => row.ROUTINE_NAME); // ‡∏Ñ‡∏∑‡∏ô‡∏ä‡∏∑‡πà‡∏≠ Stored Procedures ‡πÄ‡∏õ‡πá‡∏ô Array
    } catch (error) {
        console.error(`[‚ùå] Error fetching stored procedures: ${error.message}`);
        return [];
    } finally {
        if (connection) await connection.end();
    }
}




// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å View
async function fetchViewData(viewName, params = {}) {
    let connection;
    try {
        // ‡∏î‡∏∂‡∏á Views ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞ viewsConfig.json
        const [dbViews, configViews] = await Promise.all([
            fetchAllViewNames(),
            loadAllowedViews()
        ]);

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô fetchAllViewNames() ‡∏´‡∏£‡∏∑‡∏≠ viewsConfig.json ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á
        if (!dbViews.includes(viewName) && !configViews.includes(viewName)) {
            throw new Error(`Invalid viewName: ${viewName} is not allowed`);
        }

        connection = await mysql.createConnection(dbConfig);
        await connection.query("SET NAMES utf8");

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Query ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Parameterized Query
        const condition = Object.keys(params).map(key => `${key} = ?`).join(" AND ");
        const query = condition ? `SELECT * FROM ${viewName} WHERE ${condition}` : `SELECT * FROM ${viewName}`;
        const [rows] = await connection.execute(query, Object.values(params));

        return rows;
    } catch (error) {
        console.error(`[‚ùå] Database Error: ${error.message}`);
        return [];
    } finally {
        if (connection) await connection.end();
    }
}

async function fetchProducerData(sqlQuery,params=['','']) {
    let connection;
    try {
        connection = await mysql.createConnection(dbConfig);
        await connection.query("SET NAMES utf8");
        console.log(`[üìù] Executing Produce`);
        
        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤ params ‡πÄ‡∏õ‡πá‡∏ô object ‚Üí ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array
        if (typeof params === "object" && params !== null && !Array.isArray(params)) {
            params = Object.values(params);
        }

        // ‚úÖ ‡∏ñ‡πâ‡∏≤ params ‡πÄ‡∏õ‡πá‡∏ô array ‡∏ã‡πâ‡∏≠‡∏ô array ‚Üí Flatten ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà array ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
        if (Array.isArray(params) && params.length === 1 && Array.isArray(params[0])) {
            params = params[0];
        }

        // ‚úÖ ‡∏ñ‡πâ‡∏≤ params ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà array ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ default
        if (!Array.isArray(params)) {
            params = ['', ''];
        }
        //console.log(params);
        const [rows] = await connection.execute(sqlQuery, params);
        return rows[0];
    } catch (error) {
        console.error(`[‚ùå] Database Error (Query): ${error.message}`);
        return [];
    } finally {
        if (connection) await connection.end();
    }
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ô SQL query ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
async function fetchQueryData(sqlQuery) {
    let connection;
    try {
        connection = await mysql.createConnection(dbConfig);
        await connection.query("SET NAMES utf8");
        //console.log(`[üìù] Executing custom SQL query`,sqlQuery);
        console.log(`[üìù] Executing custom SQL query`);
        const [rows] = await connection.execute(sqlQuery); // ‚úÖ ‡∏£‡∏±‡∏ô query ‡∏ï‡∏£‡∏á‡πÜ
        //console.log(`[üìù] Executing custom SQL query`,JSON.stringify(rows));
        return rows;
    } catch (error) {
        console.error(`[‚ùå] Database Error (Query): ${error.message}`);
        return [];
    } finally {
        if (connection) await connection.end();
    }
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ Views ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
async function fetchAllViewNames() {
    let connection;
    try {
        connection = await mysql.createConnection(dbConfig);
        await connection.query("SET NAMES utf8");

        const query = "SELECT TABLE_NAME FROM information_schema.VIEWS WHERE TABLE_NAME LIKE 'onep_%'";
        const [rows] = await connection.execute(query);
    console.log(JSON.stringify(rows));
        return rows.map(row => row.TABLE_NAME); // ‡∏Ñ‡∏∑‡∏ô‡∏ä‡∏∑‡πà‡∏≠ Views ‡πÄ‡∏õ‡πá‡∏ô Array
    } catch (error) {
        console.error(`[‚ùå] Error fetching view names: ${error.message}`);
        return [];
    } finally {
        if (connection) await connection.end();
    }
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î viewsConfig.json
async function loadAllowedViews() {
    try {
        const data = await fs.readFile("viewsConfig.json", "utf8");
        const config = JSON.parse(data);
        return config.map(item => item.viewname) || [];
    } catch (error) {
        console.error(`[‚ùå] Error reading viewsConfig.json: ${error.message}`);
        return [];
    }
}

export { fetchViewData, fetchAllViewNames,fetchQueryData,fetchAllStoredProcedures,fetchProducerData};

